import sys
import builtins
import telebot
from threading import Thread
from queue import Queue

from API import API_bot, my_chat_id


class SimpleTelegramLogger:
    def __init__(self, bot, chat_id, max_length=4000, stderr=False):
        self.max_length = max_length
        self.bot = bot
        self.chat_id = chat_id
        self.input_queue = Queue()
        self.active = True
        self.buffer = ""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        self.original_stdout = sys.stdout
        self.original_stderr = sys.stderr
        self.original_input = builtins.input

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
        sys.stdout = self
        if stderr:
            sys.stderr = self
        builtins.input = self._input_handler

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        Thread(target=self._read_console_input, daemon=True).start()

        # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
        @self.bot.message_handler(func=lambda msg: True)
        def handle_message(msg):
            if msg.text:
                self.input_queue.put(msg.text)
                self.original_stdout.write(f"[Telegram Input] {msg.text}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Thread(target=self.bot.infinity_polling, daemon=True).start()

    def send_telegram_message(self, message):
        for i in range(0, len(message), self.max_length):
            chunk = message[i:i + self.max_length]
            self.bot.send_message(self.chat_id, chunk)
        self.buffer = ""

    def write(self, message, bool_buffer=True):
        if message.strip():
            # –í—ã–≤–æ–¥–∏–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π stdout
            def write_format(x: str) -> str:
                return x + "\n" if bool_buffer else x

            self.original_stdout.write(write_format(message))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–±–µ–∑ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏)
            try:
                self.buffer += message
                if "\n" in self.buffer or not bool_buffer:
                    self.send_telegram_message(self.buffer)
            except Exception as e:
                self.original_stdout.write(f"\n–û—à–∏–±–∫–∞ Telegram: {e}\n")

    def flush(self):
        self.original_stdout.flush()

    def _input_handler(self, prompt=""):
        if prompt:
            self.write(prompt, bool_buffer=False)
        return self.input_queue.get()

    def _read_console_input(self):
        while self.active:
            try:
                user_input = self.original_input()
                if user_input.strip():
                    self.input_queue.put(user_input)
                    self.bot.send_message(self.chat_id, f"[Console Input] {user_input}")
            except (EOFError, KeyboardInterrupt):
                break

    def cleanup(self):
        self.active = False
        sys.stdout = self.original_stdout
        sys.stderr = self.original_stderr
        builtins.input = self.original_input
        self.bot.stop_polling()

    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (with ...)"""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
        self.cleanup()
        if exc_type:
            error_msg = f"üö® –û—à–∏–±–∫–∞: {exc_type.__name__}: {exc_val}"
            #self.bot.send_message(self.chat_id, error_msg)
            self.original_stdout.write(f"\n{error_msg}\n")
